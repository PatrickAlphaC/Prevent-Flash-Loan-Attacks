{"version":3,"sources":["webpack:///./src/pages/types-of-attacks.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"+NAOaA,EAAe,GACtBC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,0CACA,6CACA,8pBACA,4FACA,oCACA,gEAA+C,+BAAGC,WAAW,KAAQ,CACjE,KAAQ,oFADmC,yBAA/C,KAEwC,+BAAGA,WAAW,KAAQ,CAC1D,KAAQ,8BAD4B,yBAFxC,mRAIsT,+BAAGA,WAAW,KAAQ,CACxU,KAAQ,yDAD0S,kBAJtT,KAOA,4CACA,wGACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2IAKL,qMACA,kCAAiB,+BAAGA,WAAW,KAAQ,CACnC,KAAQ,sDADK,0DAGjB,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oRAOL,oCACA,uXACA,oCACA,uKACA,4DAA2C,0BAAYA,WAAW,KAAvB,cAA3C,4BAA8H,0BAAYA,WAAW,KAAvB,QAA9H,iIACA,6QACA,4CACA,mCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,uKAQL,2FAA0E,sBAAQA,WAAW,KAAnB,SAA1E,iCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,uKAQL,mEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kQAaL,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,yDADT,kBAAH,+JAGA,yDACA,8pBAEA,oCACA,wEAAuD,+BAAGA,WAAW,KAAQ,CACzE,KAAQ,oDAD2C,wBAAvD,+fAGA,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,sGADT,kCAAH,0CAGA,2EACA,4CACA,kVACA,oCACA,yEAAwD,kBAAIA,WAAW,KAAf,UAAxD,iJACA,oDACA,6QAA4P,+BAAGA,WAAW,KAAQ,CAC9Q,KAAQ,iEADgP,0BAG5P,6DAA4C,+BAAGA,WAAW,KAAQ,CAC9D,KAAQ,yCADgC,sBAA5C,MAGF,+BAAGA,WAAW,KAAQ,CAChB,KAAQ,yEADd,wCAGE,yNAKJJ,EAAWK,gBAAiB,G,kCCvHb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-pages-types-of-attacks-mdx-5e4b0fb072daf27fefc4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Types of attacks`}</h1>\n    <h2>{`Oracle Manipulation`}</h2>\n    <p>{`This seems to be the #1 cause of attacks at the moment, by far. What is important to note, is that decentralized exchanges are not decentralized oracles. Using Uniswap, Sushiswap, or Curve to get pricing information to execute trades is pulling data from potocols whose price depends soley on liquidity. Looking at the infamous ground zero bZx attack that sparked this wave of attacks, we can see exactly what happens. These flash loans are used to crash and manipulate the price of these decentralized exchanges, which most projects deemed safe to use. The issue here relies in the fact that these protocols prices depend entirely on liquidity.`}</p>\n    <p>{`See the above section for what something like this would look like.`}</p>\n    <h3>{`Prevention`}</h3>\n    <p>{`The easiest way to solve this is to use `}<a parentName=\"p\" {...{\n        \"href\": \"https://blog.chain.link/flash-loans-and-the-importance-of-tamper-proof-oracles/\"\n      }}>{`decentralized oracles`}</a>{`. `}<a parentName=\"p\" {...{\n        \"href\": \"https://feeds.chain.link/\"\n      }}>{`Chainlink Price Feeds`}</a>{` are the leading decentralized oracle provider, and you can see that the vast majority of the protocols end up adding Chainlink to fix these attacks. If the data (price or otherwise) you're looking for isn't there yet, you can always request new decentralized networks or `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.chain.link/docs/make-a-http-get-request\"\n      }}>{`build your own`}</a>{`.`}</p>\n    <h3>{`Prevention Example`}</h3>\n    <p>{`Let's take a look at some malicious pseudo-code, pretend these are each ERC20s.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`uint256 priceOfMyGovernanceTokenInETH = dexTokenETHPairPrice;\nmyGovernanceToken.transfer(msg.sender, priceOfMyGovernanceTokenInETH)\n`}</code></pre>\n    <p>{`This right here should be the easiest red flag on the planet. If you ever do a transfer based on a centralized price oracle, you're asking to get owned. One way or another.`}</p>\n    <p>{`Check the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.chain.link/docs/get-the-latest-price\"\n      }}>{`Chainlink documentation for decentralized price feeds`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\n// constructor and getLatestPrice function truncated\nuint256 priceOfMyGovernanceTokenInETH = getLatestChainlinkPrice();\nmyGovernanceToken.transfer(msg.sender, priceOfMyGovernanceTokenInETH)\n`}</code></pre>\n    <h2>{`Reentrancy`}</h2>\n    <p>{`A reentrancy attack can occur when you create a function that makes an external call to another untrusted contract before it resolves any effects. If the attacker can control the untrusted contract, they can make a recursive call back to the original function, repeating interactions that would have otherwise not run after the effects were resolved.`}</p>\n    <h3>{`Prevention`}</h3>\n    <p>{`Leave external transactions to the last parameter. These are the harder ones to prevent, but below is a simple example of what should be done.`}</p>\n    <p>{`Whenever possible, use the built-in `}<inlineCode parentName=\"p\">{`transfer()`}</inlineCode>{` function. It only sends `}<inlineCode parentName=\"p\">{`2300`}</inlineCode>{` gas with the external call, making reentrancy almost impossible. Since that will give you just enough gas to write to a log.`}</p>\n    <p>{`You could alternativly add a mutex, or a variable that puts a lock on calling the function or working with the variables until the work with them is done. You don't need to do all of these tips, but you do need to do at least one of these tips.`}</p>\n    <h3>{`Prevention Example`}</h3>\n    <p>{`This code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function withdraw() external {\n    uint256 amount = balances[msg.sender];\n    require(token.transfer(msg.sender, amount)());\n    balances[msg.sender] = 0;\n}\n`}</code></pre>\n    <p>{`Should be changed so that the external token transfer call happens `}<strong parentName=\"p\">{`after`}</strong>{` the balance is updated to 0.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function withdraw() external {\n    uint256 amount = balances[msg.sender];\n    balances[msg.sender] = 0;\n    require(token.transfer(msg.sender, amount)());\n}\n`}</code></pre>\n    <p>{`Additionally, you could do something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`bool public mutex = false;\n\nfunction withdraw() external {\n    require(!mutex);\n    mutex = true;\n    uint256 amount = balances[msg.sender];\n    balances[msg.sender] = 0;\n    require(token.transfer(msg.sender, amount)());\n    mutex = false;\n}\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/The_DAO_(organization)\"\n      }}>{`The DAO attack`}</a>{` is an example of the reentrancy attack as well, and is also considered the mother of not just defi, but decentralized attacks in general on the ETH chain.`}</p>\n    <h2>{`Race Conditions / Front Running`}</h2>\n    <p>{`Since everything on-chain is public information, an attacker can watch transactions on-chain and look for those that would be detrimentalto the atacker, and make a transaciton with a higher gas price to occur before that transaction goes through. For example, they notice a whale is about to dump a token that the attacker holds, so the attacker pays extra gas to dump theirs first. This is known as \"front running\" in traditional finance, you could also think of it as a race condition because there can be scenarios where it's more complicated than this exmaple, but still boiled down to this.\nReentrancy technical falls under this category.`}</p>\n    <h3>{`Prevention`}</h3>\n    <p>{`The best way to prevent against these is with a `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Commitment_scheme\"\n      }}>{`commit-reveal scheme`}</a>{`. This is when a project sends a transaction that goes through and is accepted, but is hashed or encrypted. Only after the transaction has concluded that they send a \"reveal\" phrase that decodes the transaction. This method prevents both miners and users from frontrunning transactions as they cannot determine the contents of the transaction. Transactional value however, cannot be commit-revealed, making this far less effective in the defi world. This is another very difficult type of attack to prevent.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://hackernoon.com/front-running-bancor-in-150-lines-of-python-with-ethereum-api-d5e2bfd0d798\"\n      }}>{`Bancor had run into this issue`}</a>{` but fixed it before it was exploited.`}</p>\n    <p>{`#TODO looking for projects that use commit-reveal.`}</p>\n    <h2>{`Pump and Arbitrage`}</h2>\n    <p>{`Pump and arbitrage attacks are difficult to find, some even saying they are less \"attacks\" and more \"the system working as intended\". Liquidity is an important part of any and all processes, so when a whale spikes or crashes a price, does that really reflect the true value of that crash/spike? It's hard to say.`}</p>\n    <h3>{`Prevention`}</h3>\n    <p>{`Prevention at the moment hangs around preventing `}<em parentName=\"p\">{`anyone`}</em>{` from being able to cause these spikes. Sometimes, coordinated attacks from social groups can be enough to pump and dump a price of an asset.`}</p>\n    <h3>{`Additional Important Notes`}</h3>\n    <p>{`It's important to note that their are a LOT more vulnerabilities than what we are covering here. These are just the major issues we've seen in defi. This blog does a great job of outlining many of these attacks, and showing how to prevent them. `}<a parentName=\"p\" {...{\n        \"href\": \"https://blog.sigmaprime.io/solidity-security.html#reentrancy\"\n      }}>{`Various Known Attacks`}</a></p>\n    <p>{`Anther great resource that goes over `}<a parentName=\"p\" {...{\n        \"href\": \"https://solidity-by-example.org/0.6/\"\n      }}>{`additional attacks`}</a>{`.\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.soliditylang.org/en/v0.7.4/security-considerations.html\"\n      }}>{`Additional security considerations.`}</a></p>\n    <p>{`It's unclear if auditors should be catching these, or if developers and orgainizations are taking shortcuts, or if people are just \"apeing\" into projects before thinking. We are all leanring`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}